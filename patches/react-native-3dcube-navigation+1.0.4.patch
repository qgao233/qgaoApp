diff --git a/node_modules/react-native-3dcube-navigation/src/Horizontal.js b/node_modules/react-native-3dcube-navigation/src/Horizontal.js
index 862d9e3..e384262 100644
--- a/node_modules/react-native-3dcube-navigation/src/Horizontal.js
+++ b/node_modules/react-native-3dcube-navigation/src/Horizontal.js
@@ -1,84 +1,98 @@
-import React from "react";
-import PropTypes from "prop-types";
+import React from 'react';
+import PropTypes from 'prop-types';
 import {
   PanResponder,
   Animated,
   Dimensions,
   StyleSheet,
-  Image,
-  View,
-  Text,
   Platform
-} from "react-native";
-const { width, height } = Dimensions.get("window");
+} from 'react-native';
+const { width, height } = Dimensions.get('window');
 
-const PESPECTIVE = Platform.OS === "ios" ? 2.38 : 1.7;
-const TR_POSITION = Platform.OS === "ios" ? 2 : 1.5;
+const PESPECTIVE = Platform.OS === 'ios' ? 2.38 : 2.2;
+const TR_POSITION = Platform.OS === 'ios' ? 2 : 1.4;
 
 export default class CubeNavigationHorizontal extends React.Component {
   constructor(props) {
     super(props);
 
     this.pages = this.props.children.map((child, index) => width * -index);
+    this.fullWidth = (this.props.children.length - 1) * width;
 
     this.state = {
+      currentPage: this.props.initialPage || 0,
       scrollLockPage: this.pages[this.props.scrollLockPage]
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this._animatedValue = new Animated.ValueXY();
-    this._animatedValue.setValue({ x: 0, y: 0 });
-    this._value = { x: 0, y: 0 };
+    this._animatedValue.setValue({ x: this.pages[this.state.currentPage], y: 0 });
+    this._value = { x: this.pages[this.state.currentPage], y: 0 };
 
     this._animatedValue.addListener(value => {
       this._value = value;
     });
 
+    const onDoneSwiping = (gestureState) => {
+      if (this.props.callbackOnSwipe) {
+        this.props.callbackOnSwipe(false);
+      }
+      let mod = gestureState.dx > 0 ? 100 : -100;
+
+      const currentPage = this._closest(this._value.x + mod)
+      let goTo = this.pages[currentPage];
+      this._animatedValue.flattenOffset({
+        x: this._value.x,
+        y: this._value.y
+      });
+      Animated.spring(this._animatedValue, {
+        toValue: { x: goTo, y: 0 },
+        friction: 3,
+        tension: 0.6,
+        useNativeDriver:false,
+      }).start();
+      setTimeout(() => {
+        this.setState({
+          currentPage
+        });
+        if (this.props.callBackAfterSwipe)
+          this.props.callBackAfterSwipe(goTo, Math.abs(goTo / width));
+      }, 500);
+    }
+
     this._panResponder = PanResponder.create({
       onMoveShouldSetResponderCapture: () => true,
-      onMoveShouldSetResponderCapture: () => Math.abs(gestureState.dx) > 60,
+      onMoveShouldSetResponderCapture: () => Math.abs(gestureState.dx) > this.props.responderCaptureDx,
       onMoveShouldSetPanResponderCapture: (evt, gestureState) =>
-        Math.abs(gestureState.dx) > 60,
+        Math.abs(gestureState.dx) > this.props.responderCaptureDx,
       onPanResponderGrant: (e, gestureState) => {
+        if (this.props.callbackOnSwipe) {
+          this.props.callbackOnSwipe(true);
+        }
         this._animatedValue.stopAnimation();
         this._animatedValue.setOffset({ x: this._value.x, y: this._value.y });
       },
       onPanResponderMove: (e, gestureState) => {
-        Animated.event([null, { dx: this._animatedValue.x }])(e, gestureState);
-
-        // Avoid last movement
-        this.lockLast =
-          this.state.scrollLockPage != undefined
-            ? -this.state.scrollLockPage
-            : this.pages[this.pages.length - 1];
-        if (this._value.x > this.pages[0] || this._value.x < this.lockLast) {
-          this._animatedValue.setValue({ x: 0, y: 0 });
+        if (this.props.loop) {
+          if (gestureState.dx < 0 && this._value.x < - this.fullWidth) {
+            this._animatedValue.setOffset({ x: width });
+          } else if (gestureState.dx > 0 && this._value.x > 0) {
+            this._animatedValue.setOffset({ x: - (this.fullWidth + width) });
+          }
         }
+        Animated.event([null, { dx: this._animatedValue.x }],{useNativeDriver:false})(e, gestureState);
       },
       onPanResponderRelease: (e, gestureState) => {
-        let mod = gestureState.dx > 0 ? 100 : -100;
-
-        let goTo = this._closest(this._value.x + mod);
-        if (this.lockLast > goTo) return; //remove in the future
-        this._animatedValue.flattenOffset({
-          x: this._value.x,
-          y: this._value.y
-        });
-        Animated.spring(this._animatedValue, {
-          toValue: { x: goTo, y: 0 },
-          friction: 3,
-          tension: 0.6
-        }).start();
-        setTimeout(() => {
-          if (this.props.callBackAfterSwipe)
-            this.props.callBackAfterSwipe(goTo);
-        }, 500);
-      }
+        onDoneSwiping(gestureState);
+      },
+      onPanResponderTerminate: (e, gestureState) => {
+        onDoneSwiping(gestureState);
+      },
     });
   }
 
-  componentWillReceiveProps(props) {
+  UNSAFE_componentWillReceiveProps(props) {
     this.setState({
       scrollLockPage: props.scrollLockPage
         ? this.pages[props.scrollLockPage]
@@ -93,14 +107,18 @@ export default class CubeNavigationHorizontal extends React.Component {
     animated = animated == undefined ? true : animated;
 
     if (animated) {
-      Animated.spring(this._animatedValue, {
+      Animated.timing(this._animatedValue, {
         toValue: { x: this.pages[page], y: 0 },
-        friction: 4,
-        tension: 0.8
+        friction: 7,
+        tension: 0.1,
+        useNativeDriver:false,
       }).start();
     } else {
       this._animatedValue.setValue({ x: this.pages[page], y: 0 });
     }
+    this.setState({
+      currentPage: page
+    });
   }
 
   /*
@@ -110,48 +128,64 @@ export default class CubeNavigationHorizontal extends React.Component {
   _getTransformsFor = i => {
     let scrollX = this._animatedValue.x;
     let pageX = -width * i;
+    let loopVariable = (variable, sign = 1) => variable + Math.sign(sign) * (this.fullWidth + width);
+    let padInput = (variables) => {
+      if (!this.props.loop)
+        return variables;
+      const returnedVariables = [...variables];
+      returnedVariables.unshift(...variables.map(variable => loopVariable(variable, -1)))
+      returnedVariables.push(...variables.map(variable => loopVariable(variable, 1)))
+      return returnedVariables;
+    }
+    let padOutput = (variables) => {
+      if (!this.props.loop)
+        return variables;
+      const returnedVariables = [...variables];
+      returnedVariables.unshift(...variables)
+      returnedVariables.push(...variables)
+      return returnedVariables;
+    }
 
     let translateX = scrollX.interpolate({
-      inputRange: [pageX - width, pageX, pageX + width],
-      outputRange: [(-width - 1) / TR_POSITION, 0, (width + 1) / TR_POSITION],
-      extrapolate: "clamp"
+      inputRange: padInput([pageX - width, pageX, pageX + width]),
+      outputRange: padOutput([(-width - 1) / TR_POSITION, 0, (width + 1) / TR_POSITION]),
+      extrapolate: 'clamp'
     });
 
     let rotateY = scrollX.interpolate({
-      inputRange: [pageX - width, pageX, pageX + width],
-      outputRange: ["-60deg", "0deg", "60deg"],
-      extrapolate: "clamp"
+      inputRange: padInput([pageX - width, pageX, pageX + width]),
+      outputRange: padOutput(['-60deg', '0deg', '60deg']),
+      extrapolate: 'clamp'
     });
 
     let translateXAfterRotate = scrollX.interpolate({
-      inputRange: [pageX - width, pageX, pageX + width],
-      inputRange: [
+      inputRange: padInput([
         pageX - width,
         pageX - width + 0.1,
         pageX,
         pageX + width - 0.1,
         pageX + width
-      ],
-      outputRange: [
+      ]),
+      outputRange: padOutput([
         -width - 1,
         (-width - 1) / PESPECTIVE,
         0,
         (width + 1) / PESPECTIVE,
         +width + 1
-      ],
-      extrapolate: "clamp"
+      ]),
+      extrapolate: 'clamp'
     });
 
     let opacity = scrollX.interpolate({
-      inputRange: [
+      inputRange: padInput([
         pageX - width,
         pageX - width + 10,
         pageX,
         pageX + width - 250,
         pageX + width
-      ],
-      outputRange: [0, 0.6, 1, 0.6, 0],
-      extrapolate: "clamp"
+      ]),
+      outputRange: padOutput([0, 0.6, 1, 0.6, 0]),
+      extrapolate: 'clamp'
     });
 
     return {
@@ -180,10 +214,11 @@ export default class CubeNavigationHorizontal extends React.Component {
       <Animated.View
         style={[
           StyleSheet.absoluteFill,
-          { backgroundColor: "transparent" },
+          { backgroundColor: 'transparent' },
           this._getTransformsFor(i, false)
         ]}
         key={`child- ${i}`}
+        pointerEvents={this.state.currentPage == i ? 'auto' : 'none'}
       >
         {element}
       </Animated.View>
@@ -192,7 +227,6 @@ export default class CubeNavigationHorizontal extends React.Component {
 
   _closest = num => {
     let array = this.pages;
-
     let i = 0;
     let minDiff = 1000;
     let ans;
@@ -200,7 +234,7 @@ export default class CubeNavigationHorizontal extends React.Component {
       let m = Math.abs(num - array[i]);
       if (m < minDiff) {
         minDiff = m;
-        ans = array[i];
+        ans = i;
       }
     }
     return ans;
@@ -213,7 +247,7 @@ export default class CubeNavigationHorizontal extends React.Component {
 
     return (
       <Animated.View
-        style={[{ position: "absolute" }]}
+        style={[{ position: 'absolute' }]}
         ref={view => {
           this._scrollView = view;
         }}
@@ -221,7 +255,7 @@ export default class CubeNavigationHorizontal extends React.Component {
       >
         <Animated.View
           style={[
-            { backgroundColor: "#000", position: "absolute", width, height },
+            { backgroundColor: '#000', position: 'absolute', width, height },
             expandStyle
           ]}
         >
@@ -234,10 +268,16 @@ export default class CubeNavigationHorizontal extends React.Component {
 
 CubeNavigationHorizontal.propTypes = {
   callBackAfterSwipe: PropTypes.func,
+  callbackOnSwipe: PropTypes.func,
   scrollLockPage: PropTypes.number,
-  expandView: PropTypes.bool
+  initialPage: PropTypes.number,
+  responderCaptureDx: PropTypes.number,
+  expandView: PropTypes.bool,
+  loop: PropTypes.bool
 };
 
 CubeNavigationHorizontal.defaultProps = {
-  expandView: false
+  responderCaptureDx: 60,
+  expandView: false,
+  loop: false
 };
\ No newline at end of file
